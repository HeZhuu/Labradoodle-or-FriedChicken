load("/Users/chenyun/Desktop/GR5243/spr2017-proj3-grp1/lib/Random_Forests/output/RFs_fit2_train.RData")
load("/Users/chenyun/Desktop/GR5243/spr2017-proj3-grp1/lib/Random_Forests/output/workspace_fit2.RData")
fit.1
fit.1$ntree
fit.1$mtry
load("/Users/chenyun/Desktop/GR5243/spr2017-proj3-grp1/lib/Random_Forests/output/RFs_fit1_train.RData")
fit.1$mtry
fit.1$ntree
load("/Users/chenyun/Desktop/GR5243/spr2017-proj3-grp1/lib/Random_Forests/output/workspace_fit2.RData")
load("/Users/chenyun/Desktop/GR5243/spr2017-proj3-grp1/lib/Random_Forests/output/workspace_fit2.RData")
load("/Users/chenyun/Desktop/GR5243/spr2017-proj3-grp1/lib/Random_Forests/output/RFs_fit2_train.RData")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "~/Desktop/GR5243/spr2017-proj3-grp1")
library(knitr)
opts_knit$set(root.dir = "~/Desktop/GR5243/spr2017-proj3-grp1")
ggplot(data = data.frame(cv.error)) + geom_point(aes(x = 1:K, y = cv.error), color = "blue")
library(knitr)
library(randomForest)
library(ggplot2)
ggplot(data = data.frame(cv.error)) + geom_point(aes(x = 1:K, y = cv.error), color = "blue")
best <- which.min(cv.error)
system.time(fit.1 <- tuneRF(x.train[s != best,], as.factor(y.train[s != best]), ntree = 70, doBest = TRUE))
fit.1$ntree
summary(fit.1)
fit.1 <- tuneRF(x.train[s != best,], as.factor(y.train[s != best]), ntree = 70, doBest = TRUE)
fit.1$ntree
?tureRF
?tuneRF
system.time(fit.1 <- tuneRF(x.train[s != best,], as.factor(y.train[s != best]), ntreeTry = 70, doBest = TRUE))
fit.1$ntree
system.time(fit.1 <- tuneRF(x.train[s != best,], as.factor(y.train[s != best]), ntreeTry = 70, doBest = FALSE))
fit.1
randomForest(fit.1)
randomForest(fit.1, ntree = 70)
?randomForest
randomForest(x.train[s != best,], as.factor(y.train[s != best]), ntree = 70)
randomForest(x.train[s != best,], as.factor(y.train[s != best]), ntree = 500)
test <- tuneRF(x.train[s != best,], as.factor(y.train[s != best]), ntree = 70)
test
predict(test, x.train)
test <- randomForest(x.train[s != best,], as.factor(y.train[s != best]), ntree = 70)
pre <- predict(test, x.train)
table(pre, x.train)
head(pre)
table(pre, y.train)
mean(pre != y.train)
pre <- predict(test, x.test)
mean(pre != y.test)
test
